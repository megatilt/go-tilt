// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package tilt

import (
	"math/big"

	"github.com/megatilt/go-tilt/common"
	"github.com/megatilt/go-tilt/common/hexutil"
	"github.com/megatilt/go-tilt/core"
	"github.com/megatilt/go-tilt/tilt/downloader"
	"github.com/megatilt/go-tilt/tilt/gasprice"
)

func (c Config) MarshalTOML() (interface{}, error) {
	type Config struct {
		Genesis                 *core.Genesis `toml:",omitempty"`
		NetworkId               uint64
		SyncMode                downloader.SyncMode
		MaxPeers                int  `toml:"-"`
		SkipBcVersionCheck      bool `toml:"-"`
		DatabaseHandles         int  `toml:"-"`
		DatabaseCache           int
		Tiltbase               common.Address `toml:",omitempty"`
		MinerThreads            int            `toml:",omitempty"`
		ExtraData               hexutil.Bytes  `toml:",omitempty"`
		GasPrice                *big.Int
		TilthashCacheDir          string
		TilthashCachesInMem       int
		TilthashCachesOnDisk      int
		TilthashDatasetDir        string
		TilthashDatasetsInMem     int
		TilthashDatasetsOnDisk    int
		GPO                     gasprice.Config
		EnablePreimageRecording bool
		DocRoot                 string `toml:"-"`
		PowFake                 bool   `toml:"-"`
		PowTest                 bool   `toml:"-"`
		PowShared               bool   `toml:"-"`
	}
	var enc Config
	enc.Genesis = c.Genesis
	enc.NetworkId = c.NetworkId
	enc.SyncMode = c.SyncMode
	enc.MaxPeers = c.MaxPeers
	enc.SkipBcVersionCheck = c.SkipBcVersionCheck
	enc.DatabaseHandles = c.DatabaseHandles
	enc.DatabaseCache = c.DatabaseCache
	enc.Tiltbase = c.Tiltbase
	enc.MinerThreads = c.MinerThreads
	enc.ExtraData = c.ExtraData
	enc.GasPrice = c.GasPrice
	enc.TilthashCacheDir = c.TilthashCacheDir
	enc.TilthashCachesInMem = c.TilthashCachesInMem
	enc.TilthashCachesOnDisk = c.TilthashCachesOnDisk
	enc.TilthashDatasetDir = c.TilthashDatasetDir
	enc.TilthashDatasetsInMem = c.TilthashDatasetsInMem
	enc.TilthashDatasetsOnDisk = c.TilthashDatasetsOnDisk
	enc.GPO = c.GPO
	enc.EnablePreimageRecording = c.EnablePreimageRecording
	enc.DocRoot = c.DocRoot
	enc.PowFake = c.PowFake
	enc.PowTest = c.PowTest
	enc.PowShared = c.PowShared
	return &enc, nil
}

func (c *Config) UnmarshalTOML(unmarshal func(interface{}) error) error {
	type Config struct {
		Genesis                 *core.Genesis `toml:",omitempty"`
		NetworkId               *uint64
		SyncMode                *downloader.SyncMode
		MaxPeers                *int  `toml:"-"`
		SkipBcVersionCheck      *bool `toml:"-"`
		DatabaseHandles         *int  `toml:"-"`
		DatabaseCache           *int
		Tiltbase               *common.Address `toml:",omitempty"`
		MinerThreads            *int            `toml:",omitempty"`
		ExtraData               hexutil.Bytes   `toml:",omitempty"`
		GasPrice                *big.Int
		TilthashCacheDir          *string
		TilthashCachesInMem       *int
		TilthashCachesOnDisk      *int
		TilthashDatasetDir        *string
		TilthashDatasetsInMem     *int
		TilthashDatasetsOnDisk    *int
		GPO                     *gasprice.Config
		EnablePreimageRecording *bool
		DocRoot                 *string `toml:"-"`
		PowFake                 *bool   `toml:"-"`
		PowTest                 *bool   `toml:"-"`
		PowShared               *bool   `toml:"-"`
	}
	var dec Config
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.Genesis != nil {
		c.Genesis = dec.Genesis
	}
	if dec.NetworkId != nil {
		c.NetworkId = *dec.NetworkId
	}
	if dec.SyncMode != nil {
		c.SyncMode = *dec.SyncMode
	}
	if dec.MaxPeers != nil {
		c.MaxPeers = *dec.MaxPeers
	}
	if dec.SkipBcVersionCheck != nil {
		c.SkipBcVersionCheck = *dec.SkipBcVersionCheck
	}
	if dec.DatabaseHandles != nil {
		c.DatabaseHandles = *dec.DatabaseHandles
	}
	if dec.DatabaseCache != nil {
		c.DatabaseCache = *dec.DatabaseCache
	}
	if dec.Tiltbase != nil {
		c.Tiltbase = *dec.Tiltbase
	}
	if dec.MinerThreads != nil {
		c.MinerThreads = *dec.MinerThreads
	}
	if dec.ExtraData != nil {
		c.ExtraData = dec.ExtraData
	}
	if dec.GasPrice != nil {
		c.GasPrice = dec.GasPrice
	}
	if dec.TilthashCacheDir != nil {
		c.TilthashCacheDir = *dec.TilthashCacheDir
	}
	if dec.TilthashCachesInMem != nil {
		c.TilthashCachesInMem = *dec.TilthashCachesInMem
	}
	if dec.TilthashCachesOnDisk != nil {
		c.TilthashCachesOnDisk = *dec.TilthashCachesOnDisk
	}
	if dec.TilthashDatasetDir != nil {
		c.TilthashDatasetDir = *dec.TilthashDatasetDir
	}
	if dec.TilthashDatasetsInMem != nil {
		c.TilthashDatasetsInMem = *dec.TilthashDatasetsInMem
	}
	if dec.TilthashDatasetsOnDisk != nil {
		c.TilthashDatasetsOnDisk = *dec.TilthashDatasetsOnDisk
	}
	if dec.GPO != nil {
		c.GPO = *dec.GPO
	}
	if dec.EnablePreimageRecording != nil {
		c.EnablePreimageRecording = *dec.EnablePreimageRecording
	}
	if dec.DocRoot != nil {
		c.DocRoot = *dec.DocRoot
	}
	if dec.PowFake != nil {
		c.PowFake = *dec.PowFake
	}
	if dec.PowTest != nil {
		c.PowTest = *dec.PowTest
	}
	if dec.PowShared != nil {
		c.PowShared = *dec.PowShared
	}
	return nil
}
